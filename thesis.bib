% Encoding: UTF-8

@PhdThesis{Rockai15,
  author     = {Ro{\v c}kai, Petr},
  title      = {Model Checking Software [online]},
  school     = {Masaryk University, Faculty of Informatics, Brno},
  year       = {2015 [cit. 2017-06-10]},
  type       = {Doctoral theses, Dissertations},
  supervisor = {Barnat, Ji{\v r}{\' i}},
  url        = {http://is.muni.cz/th/139761/fi_d/},
}

@Article{King76,
  author     = {King, James C.},
  title      = {Symbolic Execution and Program Testing},
  journal    = {Commun. ACM},
  year       = {1976},
  volume     = {19},
  number     = {7},
  pages      = {385--394},
  month      = jul,
  issn       = {0001-0782},
  acmid      = {360252},
  address    = {New York, NY, USA},
  issue_date = {July 1976},
  keywords   = {program debugging, program proving, program testing, program verification, symbolic execution, symbolic interpretation},
  numpages   = {10},
  publisher  = {ACM},
}

@InBook{Khurshid03,
  pages     = {553--568},
  title     = {Generalized Symbolic Execution for Model Checking and Testing},
  publisher = {Springer Berlin Heidelberg},
  year      = {2003},
  author    = {Khurshid, Sarfraz and P{\u{a}}s{\u{a}}reanu, Corina S. and Visser, Willem},
  editor    = {Garavel, Hubert and Hatcliff, John},
  address   = {Berlin, Heidelberg},
  isbn      = {978-3-540-36577-8},
  booktitle = {Tools and Algorithms for the Construction and Analysis of Systems: 9th International Conference, TACAS 2003 Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2003 Warsaw, Poland, April 7--11, 2003 Proceedings},
}

@InBook{Mrazek16,
  pages     = {208--213},
  title     = {SymDIVINE: Tool for Control-Explicit Data-Symbolic State Space Exploration},
  publisher = {Springer International Publishing},
  year      = {2016},
  author    = {Mr{\'a}zek, Jan and Bauch, Petr and Lauko, Henrich and Barnat, Ji{\v{r}}{\'i}},
  editor    = {Bo{\v{s}}na{\v{c}}ki, Dragan and Wijs, Anton},
  address   = {Cham},
  isbn      = {978-3-319-32582-8},
  booktitle = {Model Checking Software: 23rd International Symposium, SPIN 2016, Co-located with ETAPS 2016, Eindhoven, The Netherlands, April 7-8, 2016, Proceedings},
}

@Book{Clarke99,
  title     = {Model checking},
  publisher = {MIT press},
  year      = {1999},
  author    = {Clarke, Edmund M and Grumberg, Orna and Peled, Doron},
}

@InProceedings{Barnat14,
  author    = {Barnat, Ji{\v{r}}{\'i} and Bauch, Petr and Havel, Vojta},
  title     = {Model Checking Parallel Programs with Inputs},
  booktitle = {2014 22nd Euromicro International Conference on Parallel, Distributed, and Network-Based Processing},
  year      = {2014},
  pages     = {756-759},
  issn      = {1066-6192},
  keywords  = {computability;parallel programming;program verification;temporal logic;LTL model checking;explicit approach;input variables;linear temporal logic;noncanonical representations;parallel program model checking;parallel program verification;quantified bit-vector formulae;quantifier-free satisfiability;state matching;state space representation;state space searching;symbolic approach;Concrete;Educational institutions;Input variables;Model checking;Protocols;Scalability;Standards;bit-vector theory;concurrency verification;ltl model checking;satisfiability modulo theories},
}

@InProceedings{Cousot79,
  author    = {Cousot, Patrick and Cousot, Radhia},
  title     = {Systematic design of program analysis frameworks},
  booktitle = {Conference Record of the Sixth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  year      = {1979},
  pages     = {269--282},
  address   = {San Antonio, Texas},
  publisher = {ACM Press, New York, NY},
}

@InProceedings{Lattner04,
  author    = {Lattner, Chris and Adve, Vikram},
  title     = {LLVM: A Compilation Framework for Lifelong Program Analysis \& Transformation},
  booktitle = {Proceedings of the International Symposium on Code Generation and Optimization: Feedback-directed and Runtime Optimization},
  year      = {2004},
  series    = {CGO '04},
  pages     = {75--},
  address   = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  acmid     = {977673},
  isbn      = {0-7695-2102-9},
  location  = {Palo Alto, California},
  url       = {http://dl.acm.org/citation.cfm?id=977395.977673},
}

@online{LLVM:web,
  author = {Chris Lattner},
  title  = {The \LLVM Compiler Infrastructure Project},
  url    = {http://llvm.org/},
  urldate = {2017-13-09},
  year = {2017}
}

@online{LLVM:langref,
  author = {{LLVM~Project}},
  title  = {LLVM Language Reference Manual},
  url    = {http://llvm.org/docs/LangRef.html},
  urldate = {2017-13-09},
  year = {2017}
}

@Book{Winskel93,
  title     = {The Formal Semantics of Programming Languages: An Introduction},
  publisher = {MIT Press},
  year      = {1993},
  author    = {Winskel, Glynn},
  address   = {Cambridge, MA, USA},
  isbn      = {0-262-23169-7},
}

@Article{Plotkin04,
  author  = {Gordon D{.} Plotkin},
  title   = {The origins of structural operational semantics},
  journal = {The Journal of Logic and Algebraic Programming},
  year    = {2004},
  volume  = {60},
  number  = {Supplement C},
  pages   = {3 - 15},
  issn    = {1567-8326},
  note    = {Structural Operational Semantics},
  url     = {http://www.sciencedirect.com/science/article/pii/S1567832604000268},
}

@Online{LLVM:opt,
  author  = {Chris Lattner},
  title   = {OPT \LLVM optimizer},
  year    = {2017},
  url     = {http://llvm.org/docs/CommandGuide/opt.html},
  urldate = {2017-23-09},
}

@Book{Baier08,
  title     = {Principles of Model Checking (Representation and Mind Series)},
  publisher = {The MIT Press},
  year      = {2008},
  author    = {Baier, Christel and Katoen, Joost-Pieter},
  isbn      = {026202649X, 9780262026499},
}

@Article{Clarke94,
  author     = {Clarke, Edmund M{.} and Grumberg, Orna and Long, David E{.}},
  title      = {Model Checking and Abstraction},
  journal    = {ACM Trans. Program. Lang. Syst.},
  year       = {1994},
  volume     = {16},
  number     = {5},
  pages      = {1512--1542},
  month      = sep,
  issn       = {0164-0925},
  acmid      = {186051},
  address    = {New York, NY, USA},
  issue_date = {Sept. 1994},
  keywords   = {abstract interpretation, binary decision diagrams (BDDs), model checking, temporal logic},
  numpages   = {31},
  publisher  = {ACM},
}

@Article{Divine17,
  author = {Baranov\'{a}, Zuzana and Barnat, Ji\v{r}\'{i} and  Kejstov\'{a}, Katar\'{i}na and Ku{\v c}era, Tade{\'{a}}{\v{s}} and  Lauko, Henrich and Mr{\'a}zek, Jan and  Ro{\v {c}}kai, Petr and  {\v{S}}till, Vladim\'{i}r},
  title  = {Model Checking of {C} and {C}++ with {DIVINE} 4},
  year   = {2017},
  note   = {Preliminary version.},
  url    = {https://divine.fi.muni.cz/2017/divine4},
}

@Article{RockaiCB17,
  author    = {Ro{\v c}kai, Petr and Ivana {\v C}ern{\'{a}} and Barnat, Ji\v{r}\'{i}},
  title     = {DiVM: Model Checking with {LLVM} and Graph Memory},
  journal   = {CoRR},
  year      = {2017},
  volume    = {abs/1703.05341},
  bibsource = {dblp computer science bibliography, http://dblp.org},
  biburl    = {http://dblp.uni-trier.de/rec/bib/journals/corr/RockaiCB17},
  timestamp = {Wed, 07 Jun 2017 14:42:01 +0200},
  url       = {http://arxiv.org/abs/1703.05341},
}

@MastersThesis{Still16,
  author     = {{\v S}till, Vladim\'ir},
  title      = {LLVM Transformations for Model Checking [online]},
  school     = {Masaryk University, Facult of Informatics, Brno},
  year       = {2016 [cit. 2017-10-08]},
  type       = {Diploma theses},
  supervisor = {Barnat, Ji\v{r}\'{i}},
  url        = {https://is.muni.cz/th/373979/fi_m/},
}

@InProceedings{Still17,
  author    = {{\v S}till, Vladim\'ir and Ro{\v c}kai, Petr and Barnat, Ji\v{r}\'{i}},
  title     = {{Using Off-the-Shelf Exception Support Components in C++ Verification}},
  booktitle = {IEEE International Conference on Software Quality, Reliability and Security (QRS)},
  year      = {2017},
  pages     = {54-64},
  month     = {July},
  keywords  = {C++ languages, Libraries, Software, Standards, Testing, Tools, C++, Exceptions, Model Checking, Unwinder, divine, exceptions, red hat},
  page      = {https://divine.fi.muni.cz/2017/exceptions/},
  url       = {http://ieeexplore.ieee.org/document/8009908/},
}

@InBook{Bauch14,
  pages     = {47--59},
  title     = {LTL Model Checking of LLVM Bitcode with Symbolic Data},
  publisher = {Springer International Publishing},
  year      = {2014},
  author    = {Bauch, Petr and Havel, Vojt{\v{e}}ch and Barnat, Ji{\v{r}}{\'i}},
  editor    = {Hlin{\v{e}}n{\'y}, Petr and Dvo{\v{r}}{\'a}k, Zden{\v{e}}k and Jaro{\v{s}}, Ji{\v{r}}{\'i} and Kofro{\v{n}}, Jan and Ko{\v{r}}enek, Jan and Matula, Petr and Pala, Karel},
  address   = {Cham},
  isbn      = {978-3-319-14896-0},
  abstract  = {The correctness of parallel and reactive programs is often easier specified using formulae of temporal logics. Yet verifying that a system satisfies such specifications is more difficult than verifying safety properties: the recurrence of a specific program state has to be detected. This paper reports on the development of a generic framework for automatic verification of linear temporal logic specifications for programs in LLVM bitcode. Our method searches explicitly through all possible interleavings of parallel threads (control non-determinism) but represents symbolically the variable evaluations (data non-determinism), guided by the specification in order to prove the correctness. To evaluate the framework we compare our method with state-of-the-art tools on a set of unmodified C programs.},
  booktitle = {Mathematical and Engineering Methods in Computer Science: 9th International Doctoral Workshop, MEMICS 2014, Tel{\v{c}}, Czech Republic, October 17--19, 2014, Revised Selected Papers},
}

@InBook{Rockai13,
  pages     = {1--15},
  title     = {Improved State Space Reductions for LTL Model Checking of C and C++ Programs},
  publisher = {Springer Berlin Heidelberg},
  year      = {2013},
  author    = {Ro{\v{c}}kai, Petr and Barnat, Ji{\v{r}}{\'i} and Brim, Lubo{\v{s}}},
  editor    = {Brat, Guillaume and Rungta, Neha and Venet, Arnaud},
  address   = {Berlin, Heidelberg},
  isbn      = {978-3-642-38088-4},
  abstract  = {In this paper, we present substantial improvements in efficiency of explicit-state LTL model checking of C {\&} C++ programs, building on [2], including improvements to state representation and to state space reduction techniques. The improved state representation allows to easily exploit symmetries in heap configurations of the program, especially in programs with interleaved heap allocations. Finally, we present a major improvement through a semi-dynamic proviso for partial-order reduction, based on eager local searches constrained through control-flow loop detection.},
  booktitle = {NASA Formal Methods: 5th International Symposium, NFM 2013, Moffett Field, CA, USA, May 14-16, 2013. Proceedings},
}

@MastersThesis{Havel14,
  author     = {Havel, Vojt{\v e}ch},
  title      = {Generic Platform for Explicit-Symbolic Verification [online]},
  school     = {Masaryk University, Faculty of Informatics, Brno},
  year       = {2014 [cit. 2017-10-14]},
  type       = {Diploma theses},
  supervisor = {Barnat, Ji{\v r}{\'i} },
  url        = {http://is.muni.cz/th/359437/fi_m/},
}

@Article{Cytron91,
  author     = {Cytron, Ron and Ferrante, Jeanne and Rosen, Barry K. and Wegman, Mark N. and Zadeck, F. Kenneth},
  title      = {Efficiently Computing Static Single Assignment Form and the Control Dependence Graph},
  journal    = {ACM Trans. Program. Lang. Syst.},
  year       = {1991},
  volume     = {13},
  number     = {4},
  pages      = {451--490},
  month      = oct,
  issn       = {0164-0925},
  acmid      = {115320},
  address    = {New York, NY, USA},
  issue_date = {Oct. 1991},
  keywords   = {control dependence, control flow graph, def-use chain, dominator, optimizing compilers},
  numpages   = {40},
  publisher  = {ACM},
}

@InProceedings{Hadarean14,
  author = {Liana Hadarean},
  title  = {An Efficient and Trustworthy Theory Solver for Bit-vectors in Satisfiability Modulo Theories},
  year   = {2014},
}

@InProceedings{duret04,
  author      = {Duret-Lutz, Alexandre and Poitrenaud, Denis},
  title       = {{SPOT: an Extensible Model Checking Library using Transition-based Generalized B{\"u}chi Automata}},
  booktitle   = {{12th IEEE/ACM International Symposium on Modeling, Analysis, and Simulation of Computer and Telecommunication Systems (MASCOTS '04)}},
  year        = {2004},
  pages       = {76-83},
  address     = {Volendam, Netherlands},
  month       = Oct,
  publisher   = {{IEEE Computer Society Press}},
  hal_id      = {hal-01496158},
  hal_version = {v1},
  url         = {https://hal.archives-ouvertes.fr/hal-01496158},
}

@InBook{Vardi96,
  pages     = {238--266},
  title     = {An automata-theoretic approach to linear temporal logic},
  publisher = {Springer Berlin Heidelberg},
  year      = {1996},
  author    = {Vardi, Moshe Y.},
  editor    = {Moller, Faron and Birtwistle, Graham},
  address   = {Berlin, Heidelberg},
  isbn      = {978-3-540-49675-5},
  abstract  = {The automata-theoretic approach to linear temporal logic uses the theory of automata as a unifying paradigm
for program specification, verification, and synthesis. Both programs and specifications are in essence descriptions
of computations. These computations can be viewed as words over some alphabet. Thus, programs and specifications can
be viewed as descriptions of languages over some alphabet. The automata-theoretic perspective considers the
relationships between programs and their specifications as relationships between languages. By translating programs
and specifications to automata, questions about programs and their specifications can be reduced to questions about
automata. More specifically, questions such as satisfiability of specifications and correctness of programs with
respect to their specifications can be reduced to questions such as nonemptiness and containment of automata.},
  booktitle = {Logics for Concurrency: Structure versus Automata},
}

@Book{Manna92,
  title     = {The Temporal Logic of Reactive and Concurrent Systems},
  publisher = {Springer-Verlag New York, Inc.},
  year      = {1992},
  author    = {Manna, Zohar and Pnueli, Amir},
  address   = {New York, NY, USA},
  isbn      = {0-387-97664-7},
}

@InBook{Clarke96,
  pages     = {419--422},
  title     = {Symbolic model checking},
  publisher = {Springer Berlin Heidelberg},
  year      = {1996},
  author    = {Clarke, E. and McMillan, K. and Campos, S. and Hartonas-Garmhausen, V.},
  editor    = {Alur, Rajeev and Henzinger, Thomas A.},
  address   = {Berlin, Heidelberg},
  isbn      = {978-3-540-68599-9},
  abstract  = {Symbolic model checking is a powerful formal specification and
verification method that has been applied successfully in several industrial
designs. Using symbolic model checking techniques it is possible to verify
industrial-size finite state systems. State spaces with up to 1030 states can
be exhaustively searched in minutes. Models with more than 10120 states have
been verified using special techniques.},
  booktitle = {Computer Aided Verification: 8th International Conference, CAV '96 New Brunswick, NJ, USA, July 31-- August 3, 1996 Proceedings},
}

@Book{McMillan93,
  title     = {Symbolic Model Checking},
  publisher = {Kluwer Academic Publishers},
  year      = {1993},
  author    = {McMillan, Kenneth L.},
  address   = {Norwell, MA, USA},
  isbn      = {0792393805},
}

@Article{Cimatti20,
  author   = {Cimatti, Alessandro and Clarke, Edmund and Giunchiglia, Fausto and Roveri, Marco},
  title    = {NUSMV: a new symbolic model checker},
  journal  = {International Journal on Software Tools for Technology Transfer},
  year     = {2000},
  volume   = {2},
  number   = {4},
  pages    = {410--425},
  month    = {Mar},
  issn     = {1433-2779},
  abstract = {This paper describes a new symbolic model checker, called NuSMV, developed as part of a joint project between CMU and IRST. NuSMV is the result of the reengineering, reimplementation and, to a limited extent, extension of the CMU SMV model checker. The core of this paper consists of a detailed description of the NuSMV functionalities, architecture, and implementation.},
  day      = {01},
}

@InBook{Kwiatkowska20,
  pages     = {200--204},
  title     = {PRISM: Probabilistic Symbolic Model Checker},
  publisher = {Springer Berlin Heidelberg},
  year      = {2002},
  author    = {Kwiatkowska, Marta and Norman, Gethin and Parker, David},
  editor    = {Field, Tony and Harrison, Peter G. and Bradley, Jeremy and Harder, Uli},
  address   = {Berlin, Heidelberg},
  isbn      = {978-3-540-46029-9},
  abstract  = {In this paper we describe PRISM, a tool being developed at the University of Birmingham for the analysis of probabilistic systems. PRISM supports three probabilistic models: discrete-time Markov chains, Markov decision processes and continuous-time Markov chains. Analysis is performed through model checking such systems against specifications written in the probabilistic temporal logics PCTL and CSL. The tool features three model checking engines: one symbolic, using BDDs (binary decision diagrams) and MTBDDs (multi-terminal BDDs); one based on sparse matrices; and one which combines both symbolic and sparse matrix methods. PRISM has been successfully used to analyse probabilistic termination, performance, and quality of service properties for a range of systems, including randomized distributed algorithms, manufacturing systems and workstation clusters.},
  booktitle = {Computer Performance Evaluation: Modelling Techniques and Tools: 12th International Conference, TOOLS 2002 London, UK, April 14--17, 2002 Proceedings},
}

@Article{Havelund20,
  author   = {Havelund, Klaus and Pressburger, Thomas},
  title    = {Model checking JAVA programs using JAVA PathFinder},
  journal  = {International Journal on Software Tools for Technology Transfer},
  year     = {2000},
  volume   = {2},
  number   = {4},
  pages    = {366--381},
  month    = {Mar},
  issn     = {1433-2779},
  abstract = {This paper describes a translator called Java PathFinder (Jpf), which translates from Java to Promela, the modeling language of the Spin model checker. Jpf translates a given Java program into a Promela model, which then can be model checked using Spin. The Java program may contain assertions, which are translated into similar assertions in the Promela model. The Spin model checker will then look for deadlocks and violations of any stated assertions. Jpf generates a Promela model with the same state space characteristics as the Java program. Hence, the Java program must have a finite and tractable state space. This work should be seen in a broader attempt to make formal methods applicable within NASA's areas such as space, aviation, and robotics. The work is a continuation of an effort to formally analyze, using Spin, a multi-threaded operating system for the Deep-Space 1 space craft, and of previous work in applying existing model checkers and theorem provers to real applications.},
  day      = {01},
}

@Article{Cousot14,
  author = {Cousot, Patrick and Cousot, Radhia},
  title  = {Abstract interpretation: past, present and future},
  year   = {2014},
  month  = {07},
  isbn   = {978-1-4503-2886-9},
}

@Article{Holzmann97,
  author     = {Holzmann, Gerard J.},
  title      = {The Model Checker SPIN},
  journal    = {IEEE Trans. Softw. Eng.},
  year       = {1997},
  volume     = {23},
  number     = {5},
  pages      = {279--295},
  month      = may,
  issn       = {0098-5589},
  acmid      = {260902},
  address    = {Piscataway, NJ, USA},
  issue_date = {May 1997},
  keywords   = {Formal methods, program verification, design verification, model checking, distributed systems, concurrency.},
  numpages   = {17},
  publisher  = {IEEE Press},
}

@InProceedings{redlib,
  author    = {F. Wang},
  title     = {REDLIB for the Formal Verification of Embedded Systems},
  booktitle = {Second International Symposium on Leveraging Applications of Formal Methods, Verification and Validation (isola 2006)},
  year      = {2006},
  pages     = {341-346},
  month     = {Nov},
  keywords  = {Boolean functions;automata theory;embedded systems;formal verification;Boolean operations;dense-time automata;dense-time state-space;dynamic memory allocation;embedded systems;formal verification;linear hybrid systems;parametric safety analysis;state-space operations;state-space representation normalizations;Automata;Boolean functions;Data structures;Embedded system;Formal verification;Graphical user interfaces;Hardware;Safety;Software libraries;System recovery},
}

@Article{Flanagan02,
  author     = {Flanagan, Cormac and Qadeer, Shaz},
  title      = {Predicate Abstraction for Software Verification},
  journal    = {SIGPLAN Not.},
  year       = {2002},
  volume     = {37},
  number     = {1},
  pages      = {191--202},
  month      = jan,
  issn       = {0362-1340},
  acmid      = {503291},
  address    = {New York, NY, USA},
  issue_date = {Jan. 2002},
  numpages   = {12},
  publisher  = {ACM},
}

@InProceedings{Beyer17,
  author    = {Beyer, Dirk},
  title     = {Software Verification with Validation of Results},
  booktitle = {Proceedings, Part II, of the 23rd International Conference on Tools and Algorithms for the Construction and Analysis of Systems - Volume 10206},
  year      = {2017},
  pages     = {331--349},
  address   = {New York, NY, USA},
  publisher = {Springer-Verlag New York, Inc.},
  acmid     = {3080481},
  isbn      = {978-3-662-54579-9},
  numpages  = {19},
}

@InBook{Clarke20,
  pages     = {154--169},
  title     = {Counter\-example-Guided Abstraction Refinement},
  publisher = {Springer Berlin Heidelberg},
  year      = {2000},
  author    = {Clarke, Edmund and Grumberg, Orna and Jha, Somesh and Lu, Yuan and Veith, Helmut},
  editor    = {Emerson, E. Allen and Sistla, Aravinda Prasad},
  address   = {Berlin, Heidelberg},
  isbn      = {978-3-540-45047-4},
  abstract  = {We present an automatic iterative abstraction-refinement methodology in which the initial abstract model is generated by an automatic analysis of the control structures in the program to be verified. Abstract models may admit erroneous (or ``spurious'') counterexamples. We devise new symbolic techniques which analyze such counterexamples and refine the abstract model correspondingly. The refinement algorithm keeps the size of the abstract state space small due to the use of abstraction functions which distinguish many degrees of abstraction for each program variable. We describe an implementation of our methodology in NuSMV. Practical experiments including a large Fujitsu IP core design with about 500 latches and 10000 lines of SMV code confirm the effectiveness of our approach.},
  booktitle = {Computer Aided Verification: 12th International Conference, CAV 2000, Chicago, IL, USA, July 15-19, 2000. Proceedings},
}

@Online{svcomp,
  author  = {Dirk Beyer},
  title   = {SV-COMP Rules},
  year    = {2017},
  url     = {https://sv-comp.sosy-lab.org/2017/rules.php},
  urldate = {2017-12-02},
}

@Article{Jonas17,
  author        = {{Mr{\'a}zek}, Jan and {Jon{\'a}{\v s}}, Martin and {Barnat}, Ji{\v{r}}{\'i}},
  title         = {{SMT Queries Decomposition and Caching in Semi-Symbolic Model Checking}},
  journal       = {ArXiv e-prints},
  year          = {2017},
  month         = nov,
  adsnote       = {Provided by the SAO/NASA Astrophysics Data System},
  adsurl        = {http://adsabs.harvard.edu/abs/2017arXiv171109084M},
  archiveprefix = {arXiv},
  eprint        = {1711.09084},
  keywords      = {Computer Science - Programming Languages, Computer Science - Logic in Computer Science},
  primaryclass  = {cs.PL},
}

@Comment{jabref-meta: databaseType:bibtex;}
